
- Wikipedia -

The Ford-Johnson algorithm, also known as "Merge-Insertion,"
comparison sorting algorithm that aims to 
minimize the number of comparisons needed to sort a list.

Algo:
Merge-insertion sort performing the following steps
on an input 'X' of 'n' elements:

1. Group the elements of X into [n/2] pairs of elements,
arbitrarily,
leaving one element unpaired
	if there is an odd number of elements

2. Perform [n/2] comparisons, one per pair,
to determine the larger of the two elements in each pair

3. Recursively sort the [n/2] larger elements from each pair,
creating a sorted sequence 'S' of [n/2] of the input elements,
in ascending order

4. Insert at the start of S
the element that was paired with
the first and smallest element of S

5. Insert the remaining [n/2] - 1 elements of X\S into S,
one at a time,
with a specially chosen insertion ordering (...)

Use binary search in subsequences of S (...)
to determine the position at which each element should be inserted

(binary search) -> used to insert elements into S
	most efficient (in worst case analysis)
	when the length of the subsequence that is searched
	is one less than a power of two
	(for those lengths, all outcomes of the search use
	the same number of comparisons as each other)

to choose an insertion ordering that produces these lengths,
consider the sorted sequence S after step 4 (before inserting the remaining elements)
and let 'xi' denote the 'ith' element of this sorted sequence.

	S = (x1, x2, x3, ...)

where each element 'xi' with i >= 3
is paired with an element 'yi' < 'xi'
that has not yet been inserted.
(there are no elements 'y1' or 'y2' because 'x1' and 'x2' were paired with each other)

if n is odd, the remaining unpaired element should also be numbered as 'yi'
with i larger than the indexes of the paired elements

then, the final steps of the outline above can be expanded into the following steps:

Partition the uninserted elements 'yi' into groups with contiguous indexes.
there are two elements 'y3' and 'y4' in the first group,
and the sums of sizes of every two adjacent groups
form a sequence of powers of two.
thus, the sizes of groups are: 2, 2, 6, 10, 22, 42, ...

Order the uninserted elements by their groups
(smaller indexes to larger indexes)
but within each group
order them from larger indexes to smaller indexes
thus, the ordering becomes: y4, y3, y6, y5, y12, y11, y10, y9, y8, y7, y22, y21, ...

Use this ordering to insert the elements 'yi' into S.
For each element 'yi', use a binary search from the start of S
up to but not including 'xi'
to determine where to insert 'yi'

Analysis

let 'C(n)' denote the number of comparisons
that merge-insertion sort makes,
in the worst case, when sorting 'n' elements

this number of comparisons can be broken down as the sum of three terms:

[n/2] comparisons among the pairs of items,

C([n/2]) comparisons for the recursive call, and

some number of comparisons for the binary insertions
used to insert the remaining elements

In the third term, the worst-case number of comparisons
for the elements in the first group is two,
because each is inserted into a subsequence of
S of length at most three

First, y4 is inserted into the three-element subsequence (x1, x2, x3)
then, y3 is inserted into some permutation of
the three-element subsequence (x1, x2, y4),
or in some cases into the two-element subsequence (x1, x2)

Similarly, the elements y6 and y5 of the second group are each inserted
into a subsequence of length at most seven,
using three comparisons.

More generally, the worst-case number of comparisons
for the elements in the 'ith' group is i + 1,
because each is inserted into a subsequence of
length at most 2^i+1 - 1

- loic -

IMPORTANT : WIP, may have innacuracies or missing steps. Also, not garanteed to work for duplicate value arrays

the Ford-Johnson algorithm ( or merge-insertion sort) is an sorting algorithm that optimizes the number of comparisons by maximizing \
comparisons within ranges of 2n - 1 elements ( aka one less than 2^n ), which are optimal for binary searches, as they required as many \
comparisons as any other ranges between 2^(n-1) and (2^n) - 1 ( inclusively )
thus, all insertions and sorts are done via binary searches, which is optimized for ranges of size 2^n - 1, aka one less than a factor of 2
it is possible work with duplicates, but it neccesitates significant tweaks to the algorithm ( it should really be a bonus ngl )

input an initial, unsorted array of values
if the lenght of said array is uneven, store one of the numbers away ( we will insert it back at the end )
pair elements together and store the pairs into a new pair array ( doesn't matter how they get paired )

sort the values inside the pairs ( biggest one first is standard )
we will call the biggest element of a given pair Pn; Xn, and the smallest; Yn
sort the pair array based on each pair X's value ( smallest to biggest )
you can used std::upper_bound() to find the right place to insert a pair in the array, as it compares the first values by defaults (aka the Xs)
this means Pn = [ Xn, Yn ], where Xn > Yn and Xn > X(n-1)
this, of course, doesn't not garantee that Yn > Y(n-1), hence the following complex sorting algorithm

create a final array and store every Xn in it ( from biggest to smallest )
put Y0 ( smallest value of P0 ) at the beginning of said final array
the array should now look like; [ Y0, X0, X1, X2, X3, X4, X5, ... ]

==== USING THE JACKOBSTHAL SEQUENCE ====

load or build the jacobsthal sequence ( 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, ... ) ( sequence where Jn = (Jn-1) + 2(Jn-2) )
we will call each jacobsthal element Je, where e is the index of the current jacobsthal element
to simplify notation when talking about the index of a pair in relation to Je, we will use e ( ex : Y(Je) -> Ye, Y( Je - 1 ) -> Y(e-1), ... )
as we need to insert Yn values from n = Je to n = J(e-1), we will call the previously used jacobsthal element Jp, where p = e - 1
to simplify notation when talking about the index of a pair in relation to Jp, we will use p ( ex : Y(Jp) -> Yp, Y( Jp + 1) -> Y(p+1), ... )

e ( current jacobsthal element index )
p ( previous jacobsthal element index )			== e - 1
max_pair_index ( the n to insert from )			== Je
min_pair_index ( the n to stop inserting at )	== J(p)
insertion_range ( the numbers of elements in the final array to look at while inserting )

min_pair_index is used as a stop point, and is never inserted after having been reached, as it already has been in the previous loop

since we already inserted Y0, we will initiate e to 2, and other variables consequently
the insertion range will be from the start of the final array to X(e-1) ( aka 3 long on the first loop )
as the iteration range is a fixed size, the final value will be kicked out of the range after each insertion \
this is by design, since all remaining insertion in this range are garanteed to be smaller than the kicked value

take the last yet uninserted Yn in the scope [ Y(e), Y(p+1) ] and insert it right before the first value larger than it
you need to insert the Yn values in REVERSE ORDER ( from largest index to smallest ), or the algorithm WILL break
repeat step 7 until all yet values in the scope have been inserted
on the first loop ( iterating over the scope [ Y2, Y1 ] ), we insert Y2, then Y1, and then finish
this could looks like ; [ Y0, X0, X1 ] -> [ Y0, X0, Y1, (X1) ] -> [ Y0, X0, Y1 ] -> [ Y2, Y0, X0, (Y2) ] -> [ Y2, Y0, X1 ]
the value in parenthesis is the value that was kicked out of the range, as it is not longer needed to compare against \
as all remaining values in the range are garanteed to be smaller than it. This is the core of the algorithm's optimization

once you are done inserting in this range, set the min_pair_index to the current max_pair_index
then, set the max_pair_index to the next max_pair_index ( aka J(e+1) )
then, set the insertion range to its next value ( aka range = (range * 2) + 1 )
at the end of the first loop, we set min_pair_index to J2 ( aka 3 ), and max_pair_index to J4 ( aka 5 )( as 5 is the next jacobsthal element )
thus, in the second loop, we insert Y4 and Y3
after, in the third loop, we insert Y10 to Y5
make sure to cap the insertion range to the final array's size ( which is often not equal to 2^n - 1 )

once all Yn have been inserted, insert the last remaining Yn ( if any ) into the array via a simple binary search
